from rest_framework import generics, filters, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly
from rest_framework.response import Response
from django_filters.rest_framework import DjangoFilterBackend
from django.db.models import Q, F
from django.core.exceptions import ValidationError
import decimal
from .models import Listing, Review, Booking
from .serializers import ListingSerializer, ReviewSerializer, BookingSerializer


class ListingListCreateView(generics.ListCreateAPIView):
    queryset = Listing.objects.filter(is_active=True)
    serializer_class = ListingSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['listing_type', 'location', 'max_guests']
    search_fields = ['title', 'description', 'location']
    ordering_fields = ['price_per_night', 'created_at']
    ordering = ['-created_at']

    def perform_create(self, serializer):
        serializer.save(host=self.request.user)


class ListingDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Listing.objects.filter(is_active=True)
    serializer_class = ListingSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_permissions(self):
        if self.request.method in ['PUT', 'PATCH', 'DELETE']:
            return [IsAuthenticated()]
        return super().get_permissions()


class ReviewListCreateView(generics.ListCreateAPIView):
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return Review.objects.none()

        listing_id = self.kwargs['listing_id']
        return Review.objects.filter(listing_id=listing_id)

    def perform_create(self, serializer):
        if getattr(self, 'swagger_fake_view', False):
            return  # Skip save during schema generation
        listing_id = self.kwargs['listing_id']
        serializer.save(reviewer=self.request.user, listing_id=listing_id)


class BookingListCreateView(generics.ListCreateAPIView):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Booking.objects.filter(guest=self.request.user)

    def perform_create(self, serializer):
        serializer.save(guest=self.request.user)


class BookingDetailView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # Check if this is a fake view generated by drf_yasg
        if getattr(self, 'swagger_fake_view', False):
            return Booking.objects.none()  # Return empty queryset for schema generation

        return Booking.objects.filter(guest=self.request.user)


@api_view(['GET'])
@permission_classes([IsAuthenticatedOrReadOnly])
def search_listings(request):
    """
    Advanced search for listings with multiple filters
    """
    queryset = Listing.objects.filter(is_active=True)

    location = request.GET.get('location')
    min_price = request.GET.get('min_price')
    max_price = request.GET.get('max_price')
    listing_type = request.GET.get('type')
    guests = request.GET.get('guests')

    if location:
        queryset = queryset.filter(location__icontains=location)
    if min_price:
        try:
            queryset = queryset.filter(price_per_night__gte=decimal.Decimal(min_price))
        except decimal.InvalidOperation:
            pass
    if max_price:
        try:
            queryset = queryset.filter(price_per_night__lte=decimal.Decimal(max_price))
        except decimal.InvalidOperation:
            pass
    if listing_type:
        queryset = queryset.filter(listing_type=listing_type)
    if guests:
        try:
            queryset = queryset.filter(max_guests__gte=int(guests))
        except ValueError:
            pass

    serializer = ListingSerializer(queryset.order_by('-created_at'), many=True)
    return Response(serializer.data)
